h2.title
  | EMPLOYEE DAYS OFF &nbsp;

= link_to 'Export to XLSX', employees_dayoffs_path(format: :xlsx)
br

table.table.pretty-table
  thead
    th Name
    th Period Info
    th Vacation days assigned (total)
    th Vacation days total for period
    th Vacation days used (total)
    th Remain vacation days
    th Days may burn by period end (total)
    th Days transfer to next period
    th Overtimes (total)
    th Sick leaves (total)
    th Unpaid days off (total)
    th Paid days off (total)
    th Work day shifts (total)
    - if Ability.new(current_user).can?(:create, Dayoff)
      th Actions
  tbody
    - @employees.each do |record|
      tr
        td width="200px"
          = link_to record.name, person_path(record)
          '
          a href="#{edit_person_path(record)}"
            i.fa.fa-pencil
          - if record.start_date.present?
            br
            = record.start_date.strftime(t(:datetime_full)).gsub('00:00, ', '')
            br
            sub = "#{months_worked(record) > 0 ? pluralize(months_worked(record), 'month') : 'not started'}"

        - if record.start_date.present? && record.start_date <= Time.zone.now
          - vacation_stats_per_year(record.id).tap do |stats|
            - stats[stats.keys.last].tap do |stat|
              - if stat.present?
                td
                  = stat['period_start_date'].gsub(/\s/, '&nbsp;').html_safe
                  br
                  | to
                  br
                  = stat['period_end_date'].gsub(/\s/, '&nbsp;').html_safe
                  br
                  = "#{(stat['year'] + 1).to_i.ordinalize} year"
                td
                  = stat['yearly_vacation_days_assigned']
                  | &nbsp;(
                  = stats.values.inject(0) { |memo, stat| memo + stat['yearly_vacation_days_assigned'] }
                  | )
                td = stat['total_vacation_days']
                td
                  - if stat['used_vacation'] >= stat['total_vacation_days']
                    span style="color: red"
                      strong
                        = stat['used_vacation']
                  - elsif stat['used_vacation'] == 0
                    span style="color: green"
                      strong 0
                  - else
                    = stat['used_vacation']
                  | &nbsp;(
                  = stats.values.inject(0) {|memo, stat| memo + stat['used_vacation']}
                  | )
                td
                  - if stat['remaining_vacation'] >= stat['total_vacation_days']
                    span style="color: green"
                      strong
                        = stat['remaining_vacation']
                  - elsif stat['remaining_vacation'] <= 0
                    span style="color: red"
                      strong
                        = stat['remaining_vacation']
                  - else
                    = stat['remaining_vacation']
                td
                  - if stat['burn_days'] > 0
                    span style="color: red"
                      strong
                        = stat['burn_days']
                  - else
                    = stat['burn_days']
                  | &nbsp;(
                  = stats.values.inject(0) {|memo, stat| memo + stat['burn_days']}
                  | )
                td = stat['transfer_days']
                td
                  - if stat['overtime_days'] > 0
                    span style="color: green"
                      strong
                        = stat['overtime_days']
                  - else
                    | 0
                  | &nbsp;(
                  = stats.values.inject(0) {|memo, stat| memo + stat['overtime_days']}
                  | )
                td
                  - if stat['sick_leave_days'] > 0
                    span style="color: green"
                      strong
                        = stat['sick_leave_days']
                  - else
                    | 0
                  | &nbsp;(
                  = stats.values.inject(0) {|memo, stat| memo + stat['sick_leave_days']}
                  | )
                td
                  = stat['unpaid_days_off']
                  | &nbsp;(
                  = stats.values.inject(0) {|memo, stat| memo + stat['unpaid_days_off']}
                  | )
                td
                  - if stat['paid_days_off'] > 0
                    span style="color: green"
                      strong
                        = stat['paid_days_off']
                  - else
                    | 0
                  | &nbsp;(
                  = stats.values.inject(0) {|memo, stat| memo + stat['paid_days_off']}
                  | )
                td
                  = stat['working_days_shifts']
                  | &nbsp;(
                  = stats.values.inject(0) {|memo, stat| memo + stat['working_days_shifts']}
                  | )
        - else
          td
            a href="#{edit_person_path(record)}"
              i.fa.fa-pencil
          td -
          td -
          td -
          td -
          td -
          td -
          td -
          td -
          td -
          td -
          td -
        - if Ability.new(current_user).can?(:create, Dayoff)
          td = link_to 'Add', new_dayoff_path(dayoff: {person_id: record.id}), class: 'btn btn-default', target: '_blank'
