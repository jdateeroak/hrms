- if @person.photo.present?
  p
    img src="#{Refile.attachment_url(@person, :photo, :fit, 200, 200, format: 'jpg')}"

- if @person.skills.present?
  p
    | Skills:&nbsp;
    strong = with_newlines(@person.skills)

- if @person.primary_tech.present?
  p
    | Primary tech:&nbsp;
    strong = @person.primary_tech

- if @person.current_position.present?
  p
    | Current Position:&nbsp;
    strong = @person.current_position

p
  | Current Status:&nbsp;
  span style="background-color: #{PERSON_STATUS_COLORS[@person.status]};"
    = @person.status.presence || 'n/a'

p
  | Status history:&nbsp;
  br
  - hr_status_updates(@person.id).each do |item|
    = item.last.strftime(t(:day))
    |&nbsp;
    span style="background-color: #{PERSON_STATUS_COLORS[item.first&.last]};"
      = item.first&.last.presence || 'n/a'
    br

- if @person.skype.present?
  p
    | Skype:&nbsp;
    strong
      a href="skype:#{@person.skype}" #{@person.skype}

- if @person.linkedin.present?
  p
    | LinkedIn:&nbsp;
    strong
      a target="_blank" href="#{@person.linkedin_value}" View

- if @person.github.present?
  p
    | Github:&nbsp;
    strong
      a target="_blank" href="#{@person.github_value}" View

- if @person.city.present?
  p
    | City:&nbsp;
    strong = @person.city.presence

- vacancies = Vacancy.where(tag: @person.tag_list).order(id: :desc)
- if vacancies.present?
  p
    | Vacancies:&nbsp;
    - vacancies.each do |vacancy|
      = link_to "#{vacancy.project}, #{vacancy.role}", vacancy_path(vacancy)
      | &nbsp;(
      = vacancy.status
      | )&nbsp;

- unless @person.tag_list.empty?
  p
    | Tags:&nbsp;
    - @person.tag_list.each do |tag|
      = link_to tag, people_path(q: {by_tag_including: tag})
      | &nbsp;

- if @person.english.present?
  p
    | English:&nbsp;
    strong = @person.english

- if current_user.has_access_to_finances? && @person.expected_salary.present?
  p
    | Expected salary:&nbsp;
    strong = @person.expected_salary

- if @person.email.present?
  p
    | Email:&nbsp;
    - if @person.status.in?(Person::EMPLOYEE_STATUSES) && !ENV['COMPANY_EMAIL_MASK'].in?(@person.email)
      span style="color: red"
        = @person.email
    - else
      strong = @person.email

- if @person.phone.present?
  p
    | Phone:&nbsp;
    strong
      a href="tel:#{@person.phone}" #{@person.phone}

- if @person.start_date.present?
  p
    | Employment Start Date:&nbsp;
    strong = @person.start_date.strftime(t(:datetime_full)).gsub('00:00, ', '')

p
  - if @person.signed_nda?
    | Signed Documents
  - else
    span style="color: red"
      | Documents are not signed!

- if @person.employee_id.present?
  p
    | Employee ID:&nbsp;
    strong = @person.employee_id

- if @person.salary_type.present?
  p
    | Salary type:&nbsp;
    strong = @person.salary_type

- if @person.last_one_on_one_meeting_at.present?
  p
    | Last 1-1 meeting with management:&nbsp;
    strong = @person.last_one_on_one_meeting_at.strftime(t(:datetime_full)).gsub('00:00, ', '')

- if @person.last_performance_review_at.present?
  p
    | Last performance review:&nbsp;
    strong = @person.last_performance_review_at.strftime(t(:datetime_full)).gsub('00:00, ', '')

- if @person.next_performance_review_at.present?
  p
    | Next performance review planned:&nbsp;
    strong = @person.next_performance_review_at.strftime(t(:datetime_full)).gsub('00:00, ', '')

- if @person.finish_date.present?
  p
    | Employment Finish Date:&nbsp;
    strong = @person.finish_date.strftime(t(:datetime_full)).gsub('00:00, ', '')

- if @person.day_of_birth.present?
  p
    | Date of birth:&nbsp;
    strong = @person.day_of_birth.strftime(t(:datetime_full)).gsub('00:00, ', '')

- if @person.source.present?
  p
    | Hiring Source:&nbsp;
    strong = @person.source

- if @person.vacation_override.to_i > 0
  p
    | Override vacation days per year:&nbsp;
    strong #{@person.vacation_override}

h3
  | Days off &nbsp;
  = link_to 'Add', new_dayoff_path(dayoff: {person_id: @person.id}), class: 'btn btn-default'
table.table.pretty-table
  tr
    th
      | Period
    th
      | Data
  - vacation_stats_per_year(@person.id).reverse_each.to_h.each_pair do |index, item|
    tr
      td
        = "#{item['period']}, #{(item['year'] + 1).ordinalize} year"
      td
        | Yearly vacation days added: #{item['yearly_vacation_days_assigned']}
        br
        | Total period vacation days: #{item['total_vacation_days']}
        br
        | Used vacation days: #{item['used_vacation']}
        br
        | Overtime days: #{item['overtime_days']}
        br
        | Sick leave days: #{item['sick_leave_days']}
        br
        | Unpaid days off: #{item['unpaid_days_off']}
        br
        | Paid days off: #{item['paid_days_off']}
        br
        | Working day shifts: #{item['working_days_shifts']}
        br
          strong
            | Remaining vacation: #{item['remaining_vacation']}
        | Days will burn: #{item['burn_days']}
        br
        | Days will be transferred: #{item['transfer_days']}

br
- @person.dayoffs.order(start_on: :desc).each do |dayoff|
  p
    a href="#{dayoff_path(dayoff)}" #{dayoff.type}
    | &nbsp;
    | #{"#{pluralize(dayoff.days, 'day')} from #{dayoff.start_on&.to_formatted_s(:rfc822)} to #{dayoff.end_on&.to_formatted_s(:rfc822)}"}
    | &nbsp;&nbsp;
    a href="#{edit_dayoff_path(dayoff)}"
      i.fa.fa-pencil
    | &nbsp;&nbsp;
    a href="#{dayoff_path(dayoff)}" data-method="delete" data-confirm="Are you sure ?"
      i.fa.fa-times
    br
    = with_newlines(dayoff.notes)

h3
  | Expenses &nbsp;
  = link_to 'Add', new_expense_path(expense: {person_id: @person.id}), class: 'btn btn-default'

| Total: $#{@person.expenses.sum(:amount)}
br
- @person.expenses.order(recorded_on: :desc).each do |expense|
  p
    a href="#{expense_path(expense)}" #{expense.type}
    | &nbsp;
    | $#{expense.amount} for #{expense.recorded_on&.to_formatted_s(:rfc822)}
    | &nbsp;&nbsp;
    a href="#{edit_expense_path(expense)}"
      i.fa.fa-pencil
    | &nbsp;&nbsp;
    a href="#{expense_path(expense)}" data-method="delete" data-confirm="Are you sure ?"
      i.fa.fa-times
    br
    = with_newlines(expense.notes)

h3
  | Latest notes &nbsp;
  = link_to 'Add', new_note_path(note: {person_id: @person.id}), class: 'btn btn-default'

- @person.notes.accessible_by(current_ability).order(updated_at: :desc).each do |note|
  p
    = note.created_at.strftime(t(:datetime_full)).gsub('00:00, ', '')
    | &nbsp;(#{note.updated_by&.email&.split('@')&.first || '?'})&nbsp;

    - if !note.type.in?(Note::FINANCE_TYPES) || (note.type.in?(Note::FINANCE_TYPES) && current_user.has_access_to_finances?)
      a href="#{edit_note_path(note)}" #{note.type}
      br
      ' #{with_newlines(note.value)}
    - else
      = "Content of this note is not available (#{note.type})"
  br

h3
  | Actions &nbsp;
  = link_to 'Add', new_action_point_path(action_point: {person_id: @person.id}), class: 'btn btn-default'

- @person.action_points.order(is_completed: :asc, perform_on: :desc).each do |action|
  p
    a href="#{edit_action_point_path(action)}" #{action.perform_on.strftime(t(:datetime_full)).gsub('00:00, ', '')}
    | &nbsp; #{action.is_completed? ? 'completed' : ''}
    br
    = with_newlines(action.value)

h3
  | Attachments &nbsp;
  = link_to 'Add', new_attachment_path(attachment: {person_id: @person.id}), class: 'btn btn-default'

- @person.attachments.order(created_at: :desc).each do |attachment|
  - if !(attachment.name.presence || attachment.file_filename).include?('offer') || ((attachment.name.presence || attachment.file_filename).include?('offer') && current_user.has_access_to_finances?)
    p
      = link_to (attachment.name.present? ? attachment.name : attachment.file_filename), Refile.attachment_url(attachment, :file)
      |&nbsp;(
      = attachment.created_at.strftime(t(:day)).gsub('00:00, ', '')
      |)
      - if attachment.description.present?
        br
        = with_newlines(attachment.description).as_json()
    br
